package com.kas.q.server;

import java.io.IOException;
import java.net.ServerSocket;
import javax.jms.JMSException;
import com.kas.containers.CappedContainerProxy;
import com.kas.containers.CappedContainersFactory;
import com.kas.containers.CappedHashMap;
import com.kas.infra.base.IInitializable;
import com.kas.infra.base.KasObject;
import com.kas.infra.base.WeakRef;
import com.kas.logging.ILogger;
import com.kas.logging.LoggerFactory;
import com.kas.q.ext.IDestination;
import com.kas.q.ext.ILocator;
import com.kas.q.impl.KasqQueue;
import com.kas.q.impl.KasqTopic;
import com.kas.q.server.internal.MessagingConfiguration;

public class KasqRepository extends KasObject implements IInitializable, ILocator
{
  /***************************************************************************************************************
   * 
   */
  private ILogger mLogger;
  private MessagingConfiguration mConfig;
  private ServerSocket mLocatorSocket;
  
  private CappedContainerProxy mQueuesMapProxy;
  private CappedHashMap<String, KasqQueue> mQueuesMap;
  private CappedContainerProxy mTopicsMapProxy;
  private CappedHashMap<String, KasqTopic> mTopicsMap;
  
  private WeakRef<KasqQueue> mDeadQueue;
  private WeakRef<KasqQueue> mAdminQueue;
  
  /***************************************************************************************************************
   * Construct the repository, specifying the Messaging configuration object.
   * 
   * @param config the {@code MessagingConfiguration} object
   */
  @SuppressWarnings("unchecked")
  KasqRepository()
  {
    mLogger = LoggerFactory.getLogger(this.getClass());
    mConfig = KasqServer.getInstance().getConfiguration();
    
    mQueuesMapProxy = new CappedContainerProxy("messaging.queues.map", mLogger);
    mQueuesMap = (CappedHashMap<String, KasqQueue>)CappedContainersFactory.createMap(mQueuesMapProxy);
    
    mTopicsMapProxy = new CappedContainerProxy("messaging.topics.map", mLogger);
    mTopicsMap = (CappedHashMap<String, KasqTopic>)CappedContainersFactory.createMap(mTopicsMapProxy);
    //
    //mDestinationsMapProxy = new CappedContainerProxy("messaging.destinations.map", mLogger);
    //mDestinationsMap = (CappedHashMap<Destination, IDestination>)CappedContainersFactory.createMap(mQueuesMapProxy);
  }
  
  /***************************************************************************************************************
   * 
   */
  public boolean init() 
  {
    mLogger.debug("KasqRepository::init() - IN");
    boolean success = true;
    
    // define deadq
    String deadq = mConfig.getDeadQueue();
    defineQueue(deadq);
    mDeadQueue = new WeakRef<KasqQueue>(mQueuesMap.get(deadq));
    
    // define adminq
    String adminq = mConfig.getAdminQueue();
    defineQueue(adminq);
    mAdminQueue = new WeakRef<KasqQueue>(mQueuesMap.get(adminq));
    
    try
    {
      mLocatorSocket = new ServerSocket(mConfig.getLocatorPort());
    }
    catch (IOException e)
    {
      success = false;
    }
    
    mLogger.debug("KasqRepository::init() - OUT, Returns=" + success);
    return success;
  }
  
  /***************************************************************************************************************
   * 
   */
  public boolean term()
  {
    mLogger.debug("KasqRepository::term() - IN");
    
    for (KasqQueue queue : mQueuesMap.values())
    {
      String qname = "unknown-queue";
      try
      {
        qname = queue.getQueueName();
      }
      catch (Throwable e) {}
      mLogger.debug("KasqRepository::term() - Writting queue contents. Queue=[" + qname + "]; Messages=[" + queue.getSize() + "]");
      queue.term();
    }
    
    try
    {
      mLocatorSocket.close();
    }
    catch (IOException e) {}
    
    mLogger.debug("KasqRepository::term() - OUT");
    return true;
  }
  
  /***************************************************************************************************************
   * Define and initialize a queue in the repository, specifying the name of the queue
   * 
   * @param name the name of the queue
   * 
   * @return true if queue definition was successful
   */
  public boolean defineQueue(String name)
  {
    return defineQueue(name, mConfig.getManagerName());
  }
  
  /***************************************************************************************************************
   * Define and initialize a queue in the repository, specifying the name of the queue and the its manager
   * 
   * @param name the name of the queue
   * @param name of the manager in which this queue is defined
   * 
   * @return true if queue definition was successful
   */
  public boolean defineQueue(String name, String managerName)
  {
    mLogger.debug("KasqRepository::defineQueue() - IN");
    boolean success = true;
    
    mLogger.info("Define queue with name=[" + name + "] at manager=[" + managerName + "]");
    
    KasqQueue queue = mQueuesMap.get(name);
    if (queue == null)
    {
      try
      {
        queue = new KasqQueue(name, managerName);
        success = queue.init();
        
        if (success) mQueuesMap.put(name, queue);
      }
      catch (Throwable e)
      {
        mLogger.error("Failed to define local queue [" + name + "] at manager=[" + managerName + "]. Exception caught: ", e);
        success = false;
      }
    }
    
    mLogger.debug("KasqRepository::defineLocalQueue() - OUT, Returns=" + success);
    return success;
  }
  
  /***************************************************************************************************************
   * Gets the dead queue
   * 
   * @return the {@code KasqQueue} object of the dead queue
   */
  public KasqQueue getDeadQueue()
  {
    return mDeadQueue.get();
  }
  
  /***************************************************************************************************************
   * Gets the admin queue
   * 
   * @return the {@code KasqQueue} object of the admin queue
   */
  public KasqQueue getAdminQueue()
  {
    return mAdminQueue.get();
  }
  
  /***************************************************************************************************************
   * 
   */
  public synchronized KasqQueue locateQueue(String name)
  {
    return mQueuesMap.get(name);
  }

  /***************************************************************************************************************
   * 
   */
  public synchronized KasqTopic locateTopic(String name)
  {
    return null;
  }
  
  /***************************************************************************************************************
   * @throws JMSException 
   * 
   */
  public IDestination locate(String name) throws JMSException
  {
    IDestination iDest = locateQueue(name);
    return (iDest != null ? iDest : locateTopic(name));
  }
  
  /***************************************************************************************************************
   * 
   */
  public String toPrintableString(int level)
  {
    String pad = pad(level);
    StringBuffer sb = new StringBuffer();
    
    sb.append(name()).append("(\n")
      .append(pad).append("  Queues=(").append(mQueuesMap.toPrintableString(level + 1)).append(")\n")
      .append(pad).append(")");
    
    return sb.toString();
  }
}
