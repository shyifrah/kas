package com.kas.mq.server.processors.query;

import com.kas.config.MainConfiguration;
import com.kas.db.DbConnectionPool;
import com.kas.infra.base.Properties;
import com.kas.mq.impl.EQueryConfigType;
import com.kas.mq.impl.EQueryType;
import com.kas.mq.impl.messages.IMqMessage;
import com.kas.mq.internal.EMqCode;
import com.kas.mq.internal.IMqConstants;
import com.kas.mq.server.IRepository;
import com.kas.mq.server.internal.SessionHandler;
import com.kas.mq.server.processors.AProcessor;
import com.kas.sec.access.AccessLevel;
import com.kas.sec.resources.EResourceClass;

/**
 * Processor for querying server's configuration
 * 
 * @author Pippo
 */
public class QueryConfigProcessor extends AProcessor
{
  /**
   * Input
   */
  private EQueryConfigType mConfigType;
  
  /**
   * Construct a {@link QueryConfigProcessor}
   * 
   * @param request
   *   The request message
   * @param handler
   *   The session handler
   * @param repository
   *   The server's repository
   */
  public QueryConfigProcessor(IMqMessage request, SessionHandler handler, IRepository repository)
  {
    super(request, handler, repository);
  }
  
  /**
   * Process request
   * 
   * @return
   *   response message generated by {@link #respond()}
   */
  public IMqMessage process()
  {
    mLogger.trace("QueryConfigSubProcessor::process() - IN");
    
    String body = null;
    Properties props = null;
    
    if (!mConfig.isEnabled())
    {
      mDesc = "KAS/MQ server is disabled";
      mLogger.trace("QueryConfigSubProcessor::process() - {}", mDesc);
    }
    else
    {
      mCode = EMqCode.cOkay;
      mDesc = "";
      
      String qConfigType = mRequest.getStringProperty(IMqConstants.cKasPropertyQueryConfigType, "ALL");
      mConfigType = EQueryConfigType.valueOf(qConfigType);
      
      String cmdRes = String.format("%s_%s", EQueryType.QUERY_CONFIG.name(), qConfigType);
      if (!isAccessPermitted(EResourceClass.COMMAND, cmdRes))
      {
        mCode = EMqCode.cError;
        mDesc = "User is not permitted to query configuration";
        mLogger.trace("QueryQueueSubProcessor::process() - Insufficient permissions: ResClass=COMMAND; Resource={}; Access={}", cmdRes, AccessLevel.READ_ACCESS);
      }
      else
      {
        switch (mConfigType)
        {
          case ALL:
            body = MainConfiguration.getInstance().toPrintableString();
            break;
          case MQ:
            body = mConfig.toPrintableString();
            break;
          case DB:
            body = DbConnectionPool.getInstance().getConfig().toPrintableString();
            break;
        }
      }
    }
    
    mLogger.trace("QueryConfigSubProcessor::process() - OUT");
    return respond(body, props);
  }
}
