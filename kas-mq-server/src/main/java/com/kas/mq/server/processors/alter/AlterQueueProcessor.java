package com.kas.mq.server.processors.alter;

import com.kas.infra.base.Properties;
import com.kas.infra.utils.StringUtils;
import com.kas.mq.impl.messages.IMqMessage;
import com.kas.mq.internal.EMqCode;
import com.kas.mq.internal.IMqConstants;
import com.kas.mq.internal.MqLocalQueue;
import com.kas.mq.server.IRepository;
import com.kas.mq.server.internal.SessionHandler;
import com.kas.mq.server.processors.AProcessor;
import com.kas.sec.access.AccessLevel;
import com.kas.sec.resources.EResourceClass;

/**
 * Processor for altering queues
 * 
 * @author Chen
 */
public class AlterQueueProcessor extends AProcessor
{
 
  /**
   * Input
   */
  private String mQueue;
  
  /**
   * Construct a {@link AlterQueueProcessor}
   * 
   * @param request
   *   The request message
   * @param handler
   *   The session handler
   * @param repository
   *   The server's repository
   */
  public AlterQueueProcessor(IMqMessage request, SessionHandler handler, IRepository repository)
  {
    super(request, handler, repository);
  }
  
  /**
   * Process request
   * 
   * @return
   *   response message generated by {@link #respond()}
   */
  public IMqMessage process()
  {
    mLogger.trace("AlterQueueProcessor::process() - IN");
    
    if (!mConfig.isEnabled())
    {
      mDesc = "KAS/MQ server is disabled";
      mLogger.trace("AlterQueueProcessor::process() - {}", mDesc);
    }
    else
    {    	    	
      mQueue = mRequest.getStringProperty(IMqConstants.cKasPropertyAltQueueName, null);
      Properties qProps = mRequest.getSubset(IMqConstants.cKasPropertyPrefix + "alt.q.opt.");
      
      MqLocalQueue mqlq = mRepository.getLocalQueue(mQueue);
      if (qProps.size() == 0)
      {
        mDesc = "At least one queue property must be specified";
        mLogger.trace("AlterQueueProcessor::process() - {}", mDesc);
      }
      else if (mqlq == null)
      {
        mDesc = "Queue with name \"" + mQueue + "\" does not exists";
        mLogger.trace("AlterQueueProcessor::process() - {}", mDesc);
      }
      else if (!isAccessPermitted(EResourceClass.COMMAND, String.format("ALTER_QUEUE_%s", mQueue)))
      {
        mDesc = "User is not permitted to issue ALTER_QUEUE command";
        mLogger.warn(mDesc);
      }
      else if (!isAccessPermitted(EResourceClass.QUEUE, mQueue, AccessLevel.ALTER_ACCESS))
      {
        mDesc = "User is not permitted to alter queues";
        mLogger.warn(mDesc);
      }
      else
      {
        mqlq = mRepository.alterLocalQueue(mQueue, qProps);
        mLogger.trace("AlterQueueProcessor::process() - Altered queue {}", StringUtils.asPrintableString(mqlq));
        mDesc = "Queue " + mQueue + " was successfully altered";
        mCode = EMqCode.cOkay;
      }
    }
    
    mLogger.debug("AlterQueueProcessor::process() - OUT");
    return respond();
  }
}
